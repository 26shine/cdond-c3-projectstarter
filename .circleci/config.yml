version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            sleep 5
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if the workflow fails.
    parameters:
      migration-status-url:
        type: string
        default: "https://kvdb.io/$KVDB_BUCKET_ID/migration_${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            echo "Reverting migrations: ${CIRCLE_WORKFLOW_ID:0:7}"
            set -e
            
            # Use the migration status URL parameter
            MIGRATION_STATUS_URL="${migration-status-url}"
            
            # Check if the migration was successful
            SUCCESS=$(curl --insecure "$MIGRATION_STATUS_URL")
            
            if [ "$SUCCESS" == "1" ]; then
              cd backend
              npm install
              npm run migrations:revert
              echo "Migrations reverted."
            else
              echo "Migration status not found or not successful. Skip reverting."
            fi

  slack-notification:
    steps:
      - run:
          name: Send Slack Notification
          when: on_fail
          command: |
            MESSAGE="Branch: $CIRCLE_BRANCH\nJob Name: $CIRCLE_JOB\nJob URL: $CIRCLE_BUILD_URL"
            JSON_PAYLOAD='{
              "attachments":[
                {
                  "fallback":"CircleCI Notification",
                  "color":"#D00000",
                  "fields":[
                    {
                      "title":"CircleCI Run Failed",
                      "value":"'"$MESSAGE"'",
                      "short":false
                    }
                  ]
                }
              ]
            }'
            curl -kX POST -H 'Content-type: application/json' --data "$JSON_PAYLOAD" "$SLACK_WEBHOOK_URL"

  install-dependencies:
    steps:
      - run:
          name: Installing necessary packages
          command: |
            sudo apt update
            sudo apt install -y tar gzip curl software-properties-common
      - run:
          name: Installing aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Installing ansible
          command: |
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible

  cloudformation-deploy:
    parameters:
      template-file:
        type: string
      stack-name:
        type: string
      tags: 
        type: string
        default: udapeople
    steps:
      - run:
          name: Deploy Cloudformation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/<<parameters.template-file>> \
              --stack-name "<<parameters.stack-name>>-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=<<parameters.tags>>

  cloudformation-destroy:
    parameters:
      stack-name:
        type: string
    steps:
      - run:
          name: Cloudformation destroy
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "<<parameters.stack-name>>-${CIRCLE_WORKFLOW_ID:0:7}"

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack-notification

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack-notification

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
      - slack-notification

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Run test front-end
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
      - slack-notification

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Run scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan
      - slack-notification

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Run scan front-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan
      - slack-notification

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      # Create stack BE
      - cloudformation-deploy:
          template-file: "backend.yml"
          stack-name: "udapeople-backend"
      # Create stack FE
      - cloudformation-deploy:
          template-file: "frontend.yml"
          stack-name: "udapeople-frontend"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cat .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text >> ~/project/.circleci/ansible/inventory.txt
            cd .circleci/ansible
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - cloudformation-deploy:
          stack-name: udapeople-backend
      - cloudformation-deploy:
          stack-name: udapeople-frontend

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - $SSH_KEY_FINGERPRINT
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            sudo apt install -y nodejs
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to Kvdb
          command: |
            echo "Saving migrations: ${CIRCLE_WORKFLOW_ID:0:7}"
            if grep -q "executed successfully" ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/$KVDB_BUCKET_ID/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
              echo "Saved migration!"
            else
              echo "Skip migration!"
            fi
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-frontend]
      - install-dependencies
      - run:
          name: "Get-backend-url"
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            npm i
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment   

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - $SSH_KEY_FINGERPRINT
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible curl
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            cd backend
            npm install
            npm run start 
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is ------$(cat inventory.txt)"
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-environment

  smoke-test-backend:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test
          command: |
              BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
              API_URL="http://${BACKEND_IP}:3030"
              echo "api url: ${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                exit 0
              else
                exit 1
              fi
      - revert-migrations 
      - destroy-environment

  smoke-test-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Smoke test for front end
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"             
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - revert-migrations 
      - destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install-dependencies
      - run:
          name: Install dependencies / Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "Old Workflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/$KVDB_BUCKET_ID/old_workflow_id -d "$OLD_WORKFLOW_ID"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --stack-name initial-stack
            --region $AWS_REGION
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old workflow id, remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"

            export OLD_WORKFLOW_ID=$(curl --insecure https://kvdb.io/$KVDB_BUCKET_ID/old_workflow_id)
            echo Old Workflow ID: $OLD_WORKFLOW_ID

            if [ -n "$OLD_WORKFLOW_ID" ] && [[ "${STACKS[@]}" =~ "${OLD_WORKFLOW_ID}" ]]; then
              aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
              sleep 5
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
              echo "=======================Delete Confirmed========================"
            else
              echo "=======================Didn't delete========================"            
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test-backend:
          requires: [deploy-backend]
      - smoke-test-frontend:
          requires: [deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test-backend, smoke-test-frontend]
      - cleanup:
          requires: [cloudfront-update]